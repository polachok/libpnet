// Copyright (c) 2014, 2015 Robert Clipsham <robert@octarineparrot.com>
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use packet::Packet;
use packet::PacketSize;
use packet::PrimitiveValues;
use packet::ip::IpNextHeaderProtocol;

use pnet_macros_support::types::*;

use std::net::{Ipv4Addr, Ipv6Addr};

/// Represents a TCP Packet
#[packet]
pub struct Tcp {
    source: u16be,
    destination: u16be,
    sequence: u32be,
    acknowledgement: u32be,
    data_offset: u4,
    reserved: u3,
    ns: u1,
    cwr: u1,
    ece: u1,
    urg: u1,
    ack: u1,
    psh: u1,
    rst: u1,
    syn: u1,
    fin: u1,
    window: u16be,
    checksum: u16be,
    urgent_ptr: u16be,
    #[length_fn = "tcp_options_length"]
    options: Vec<TcpOption>,
    #[payload]
    payload: Vec<u8>,
}

/// Represents a TCP option
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct TcpOptionNumber(pub u8);

/// TCP header options
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod TcpOptionNumbers {
  use super::TcpOptionNumber;

  /// End of Options list
  pub const EOL: TcpOptionNumber = TcpOptionNumber(0);

  /// No operation
  pub const NOP: TcpOptionNumber = TcpOptionNumber(1);

  /// MSS
  pub const MSS: TcpOptionNumber = TcpOptionNumber(2);

  /// Window scale
  pub const WSCALE: TcpOptionNumber = TcpOptionNumber(3);

  /// Selective acknowledgements permitted
  pub const SACK_PERMITTED: TcpOptionNumber = TcpOptionNumber(4);

  /// Selective acknowledgment
  pub const SACK: TcpOptionNumber = TcpOptionNumber(5);

  /// Timestamps
  pub const TIMESTAMPS: TcpOptionNumber = TcpOptionNumber(8);
}

/// TCP option
#[packet]
pub struct TcpOption {
    #[construct_with(u8)]
    number: TcpOptionNumber,
    #[length_fn = "tcp_option_length"]
    // The length field is an optional field, using a Vec is a way to implement
    // it
    length: Vec<u8>,
    #[length_fn = "tcp_option_payload_length"]
    #[payload]
    data: Vec<u8>,
}

impl TcpOption {
    /// Get option number
    pub fn get_number(&self) -> TcpOptionNumber {
        self.number
    }

    /// Get data
    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    
    /// Create NOP option
    pub fn nop() -> Self {
        TcpOption {
             number: TcpOptionNumbers::NOP,
             length: vec![],
             data: vec![],
        }
    }

    /// Create Timestamp option
    pub fn timestamp(my: [u8;4], their: [u8;4]) -> Self {
        let mut data = vec![];
        data.extend_from_slice(&my[..]);
        data.extend_from_slice(&their[..]);

        TcpOption {
            number: TcpOptionNumbers::TIMESTAMPS,
            length: vec![10],
            data: data
        }
    }
}

/// This function gets the 'length' of the length field of the IPv4Option packet
/// Few options (EOL, NOP) are 1 bytes long, and then have a length field equal
/// to 0
fn tcp_option_length(option: &TcpOptionPacket) -> usize {
    match option.get_number() {
        TcpOptionNumbers::EOL => 0,
        TcpOptionNumbers::NOP => 0,
        _ => 1,
    }
}

fn tcp_option_payload_length(tcp_option: &TcpOptionPacket) -> usize {
    match tcp_option.get_number() {
        TcpOptionNumbers::EOL => 0,
        TcpOptionNumbers::NOP => 0,
        TcpOptionNumbers::MSS => 2,
        TcpOptionNumbers::WSCALE => 1,
        TcpOptionNumbers::SACK_PERMITTED => 0,
        TcpOptionNumbers::TIMESTAMPS => 8,
        TcpOptionNumbers::SACK | _ => {
            match tcp_option.get_length().first() {
                Some(len) => *len as usize - 2,
                None => 0,
            }
        },
    }
}

impl TcpOptionNumber {
    /// Create a new TcpOptionNumber
    pub fn new(value: u8) -> TcpOptionNumber {
        TcpOptionNumber(value)
    }
}

impl PrimitiveValues for TcpOptionNumber {
    type T = (u8,);
    fn to_primitive_values(&self) -> (u8,) {
        (self.0,)
    }
}

fn tcp_options_length(tcp: &TcpPacket) -> usize {
  tcp.get_data_offset() as usize * 4 - 20
}


/// Calculate the checksum for a packet built on IPv4
pub fn ipv4_checksum(packet: &TcpPacket,
                     ipv4_source: Ipv4Addr,
                     ipv4_destination: Ipv4Addr,
                     next_level_protocol: IpNextHeaderProtocol)
    -> u16be {
    let IpNextHeaderProtocol(next_level_protocol) = next_level_protocol;
    let mut sum = 0u32;

    // Checksum pseudo-header
    // IPv4 source
    let octets = ipv4_source.octets();
    sum += (octets[0] as u32) << 8 | octets[1] as u32;
    sum += (octets[2] as u32) << 8 | octets[3] as u32;

    // IPv4 destination
    let octets = ipv4_destination.octets();
    sum += (octets[0] as u32) << 8 | octets[1] as u32;
    sum += (octets[2] as u32) << 8 | octets[3] as u32;

    // IPv4 Next level protocol
    sum += next_level_protocol as u32;

    // TCP Length
    sum += packet.packet().len() as u32;

    // Checksum TCP header/packet
    let mut i = 0;
    let len = packet.packet().len();
    while i < len && i + 1 < len {
        sum += (packet.packet()[i] as u32) << 8 | packet.packet()[i + 1] as u32;
        i += 2;
    }
    // If the length is odd, make sure to checksum the final byte
    if len & 1 != 0 {
        sum += (packet.packet()[len - 1] as u32) << 8;
    }

    while sum >> 16 != 0 {
        sum = (sum >> 16) + (sum & 0xFFFF);
    }

    !sum as u16
}

#[test]
fn tcp_header_ipv4_test() {
    use pnet::packet::ip::IpNextHeaderProtocols;
    use pnet::packet::ipv4::MutableIpv4Packet;

    let mut packet = [0u8; 20 + 32 + 4];
    let ipv4_source = Ipv4Addr::new(192, 168, 2, 1);
    let ipv4_destination = Ipv4Addr::new(192, 168, 111, 51);
    let next_level_protocol = IpNextHeaderProtocols::Tcp;
    {
        let mut ip_header = MutableIpv4Packet::new(&mut packet[..]).unwrap();
        ip_header.set_next_level_protocol(next_level_protocol);
        ip_header.set_source(ipv4_source);
        ip_header.set_destination(ipv4_destination);
    }

    // Set data
    packet[20 + 32] = 't' as u8;
    packet[20 + 32 + 1] = 'e' as u8;
    packet[20 + 32 + 2] = 's' as u8;
    packet[20 + 32 + 3] = 't' as u8;

    {
        let mut tcp_header = MutableTcpPacket::new(&mut packet[20..]).unwrap();
        tcp_header.set_source(49511);
        assert_eq!(tcp_header.get_source(), 49511);

        tcp_header.set_destination(9000);
        assert_eq!(tcp_header.get_destination(), 9000);

        tcp_header.set_sequence(0x9037d2b8);
        assert_eq!(tcp_header.get_sequence(), 0x9037d2b8);

        tcp_header.set_acknowledgement(0x944bb276);
        assert_eq!(tcp_header.get_acknowledgement(), 0x944bb276);

        tcp_header.set_psh(1);
        assert_eq!(tcp_header.get_psh(), 1);

        tcp_header.set_ack(1);
        assert_eq!(tcp_header.get_ack(), 1);

        tcp_header.set_window(4015);
        assert_eq!(tcp_header.get_window(), 4015);

        tcp_header.set_data_offset(8);
        assert_eq!(tcp_header.get_data_offset(), 8);

        let ts = TcpOption::timestamp([0x2c, 0x57, 0xcd, 0xa5], [0x02, 0xa0, 0x41, 0x92]);
        tcp_header.set_options(&vec![TcpOption::nop(), TcpOption::nop(), ts]);

        let checksum = ipv4_checksum(&tcp_header.to_immutable(),
                                     ipv4_source,
                                     ipv4_destination,
                                     next_level_protocol);
        tcp_header.set_checksum(checksum);
        assert_eq!(tcp_header.get_checksum(), 0xc031);
    }
    let ref_packet = [0xc1, 0x67, /* source */
                      0x23, 0x28, /* destination */
                      0x90, 0x37, 0xd2, 0xb8, /* seq */
                      0x94, 0x4b, 0xb2, 0x76, /* ack */
                      0x80, 0x18, 0x0f, 0xaf, /* length, flags, win */
                      0xc0, 0x31, /* checksum */
                      0x00, 0x00,  /* urg ptr */
                      0x01, 0x01, /* options: nop */
                      0x08, 0x0a, 0x2c, 0x57,
                      0xcd, 0xa5, 0x02, 0xa0,
                      0x41, 0x92, /* timestamp */
                      0x74, 0x65, 0x73, 0x74 /* test */
                      ];
    assert_eq!(&ref_packet[..], &packet[20..]);
}
